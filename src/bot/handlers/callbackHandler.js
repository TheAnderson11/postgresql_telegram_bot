import { skipButton } from '../utils/skipButton.js';


export const handleCallbackQuery = async (bot, query, userStates) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const state = userStates[chatId];

    if (!state) {
        const { restartFlow } = await import('../state/stateManager.js');
        return restartFlow(bot, chatId);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    // –ü—Ä–æ–ø—É—Å–∫ claimant_phone
    if (data === 'skip' && state.step === 'claimant_phone') {
        state.data.claimant_phone = null;
        state.step = 'claimant_ipn';
        await bot.sendMessage(chatId, '–Ü–ü–ù –ø–æ–∑–∏–≤–∞—á–∞:', skipButton());
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ claimant_ipn
    if (data === 'skip' && state.step === 'claimant_ipn') {
        state.data.claimant_ipn = null;
        state.step = 'respondent_name';
        await bot.sendMessage(chatId, '2. –ü–Ü–ë –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:');
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ respondent_address
    if (data === 'skip' && state.step === 'respondent_address') {
        state.data.respondent_address = null;
        state.step = 'respondent_phone';
        await bot.sendMessage(chatId, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ respondent_phone
    if (data === 'skip' && state.step === 'respondent_phone') {
        state.data.respondent_phone = null;
        state.step = 'respondent_work';
        await bot.sendMessage(chatId, '–ú—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ respondent_work
    if (data === 'skip' && state.step === 'respondent_work') {
        state.data.respondent_work = null;
        state.step = 'respondent_ipn';
        await bot.sendMessage(chatId, '–Ü–ü–ù –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ respondent_ipn
    if (data === 'skip' && state.step === 'respondent_ipn') {
        state.data.respondent_ipn = null;
        state.step = 'children_count';
        await bot.sendMessage(chatId, '3. –°–∫—ñ–ª—å–∫–∏ —É –≤–∞—Å –¥—ñ—Ç–µ–π?', skipButton());
        return bot.answerCallbackQuery(query.id);
    }

    // –ü—Ä–æ–ø—É—Å–∫ children_count
    if (data === 'skip' && state.step === 'children_count') {
        state.childrenTotal = 0;
        state.children = [];
        state.step = 'marriage_check';
        await bot.sendMessage(chatId, '4. –ß–∏ –ø–µ—Ä–µ–±—É–≤–∞–ª–∏ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —à–ª—é–±—ñ?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–¢–∞–∫', callback_data: 'marriage_yes' }],
                    [{ text: '–ù—ñ', callback_data: 'marriage_no' }]
                ]
            }
        });
        return bot.answerCallbackQuery(query.id);
    };

    // –ü—Ä–æ–ø—É—Å–∫ waiting_attachments
    if (data === 'skip' && state.step === 'waiting_attachments') {
        const photoTitles = [
            '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)',
            '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)',
            '–î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ —Å–∫–ª–∞–¥ —Å—ñ–º‚Äô—ó –∞–±–æ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏',
            '–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ —Å–ø–ª–∞—Ç—É —Å—É–¥–æ–≤–æ–≥–æ –∑–±–æ—Ä—É'
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞ –≤ attachments –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥
        state.attachments[state.attachmentStep] = null;

        state.attachmentStep++;

        if (state.attachmentStep < photoTitles.length) {
            const nextDoc = photoTitles[state.attachmentStep];

            if (nextDoc === '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)') {
                await bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`, {
                    reply_markup: {
                        inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip' }]]
                    }
                });
            } else {
                await bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`);
            }
        } else {
            state.step = 'submit_ready';
            await bot.sendMessage(chatId, '‚úÖ –£—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É:', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üì® –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É', callback_data: 'submit_form' }]]
                }
            });
        }
        return bot.answerCallbackQuery(query.id);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–∑–¥–∞–Ω–∏–µ PDF)
    if (data === 'submit_form') {
        const { createPdf } = await import('../../pdf/pdfGenerator.js');
        try {
            const pdfBytes = await createPdf({
                data: state.data,
                children: state.children,
                attachments: state.attachments
            }, bot);

            const pdfBuffer = Buffer.from(pdfBytes);

            await bot.sendDocument(chatId, pdfBuffer, {
                filename: 'alimony_statement.pdf',
                contentType: 'application/pdf'
            });
            await bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏! –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç–∫—É: 1234 5678 9012 3456.');
            delete userStates[chatId];
        } catch (e) {
            console.error('‚ùå PDF Error:', e);
            await bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ PDF.');
        }
        return bot.answerCallbackQuery(query.id);
    }

    // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    switch (data) {
        // –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
        case 'lives_mother':
        case 'lives_father':
        case 'lives_other':
            state.children[state.childIndex].lives_with = data.replace('lives_', '');
            state.childIndex++;
            if (state.childIndex < state.childrenTotal) {
                state.step = 'child_name';
                await bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –¥–∏—Ç–∏–Ω–∏ ‚Ññ${state.childIndex + 1}:`);
            } else {
                state.step = 'marriage_check';
                await bot.sendMessage(chatId, '4. –ß–∏ –ø–µ—Ä–µ–±—É–≤–∞–ª–∏ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —à–ª—é–±—ñ?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–¢–∞–∫', callback_data: 'marriage_yes' }],
                            [{ text: '–ù—ñ', callback_data: 'marriage_no' }]
                        ]
                    }
                });
            }
            break;

        // –®–ª—é–±
        case 'marriage_yes':
            state.step = 'marriage_date';
            await bot.sendMessage(chatId, '–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —à–ª—é–±—É (–î–î.–ú–ú.–†–†–†–†):');
            break;
        case 'marriage_no':
            state.step = 'alimony_choice';
            await bot.sendMessage(chatId, '5. –°—É–º–∞ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∞–±–æ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1/4 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_4' }],
                        [{ text: '1/3 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_3' }],
                        [{ text: '1/2 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_2' }],
                        [{ text: '–í–≤–µ—Å—Ç–∏ —Å—É–º—É', callback_data: 'enter_amount' }]
                    ]
                }
            });
            break;

        // –†–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É
        case 'divorce_yes':
            state.step = 'marriage_divorce_date';
            await bot.sendMessage(chatId, '–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (–î–î.–ú–ú.–†–†–†–†):');
            break;
        case 'divorce_no':
            state.step = 'alimony_choice';
            await bot.sendMessage(chatId, '5. –°—É–º–∞ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∞–±–æ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1/4 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_4' }],
                        [{ text: '1/3 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_3' }],
                        [{ text: '1/2 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_2' }],
                        [{ text: '–í–≤–µ—Å—Ç–∏ —Å—É–º—É', callback_data: 'enter_amount' }]
                    ]
                }
            });
            break;

        // –í—ã–±–æ—Ä –∞–ª–∏–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        case 'percent_1_4':
        case 'percent_1_3':
        case 'percent_1_2':
            state.data.alimony = data.replace('percent_', '').replace(/_/g, '/');
            state.step = 'court_name';
            await bot.sendMessage(chatId,
                `6. –°—É–¥–æ–≤–∞ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è:\n\n` +
                `‚Ä¢ –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ —Å—É–¥—É, –¥–æ —è–∫–æ–≥–æ –ø–æ–¥–∞—î—Ç—å—Å—è –∑–∞—è–≤–∞ (–∑–∞–∑–≤–∏—á–∞–π ‚Äì –∑–∞ –º—ñ—Å—Ü–µ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞ –∞–±–æ –ø–æ–∑–∏–≤–∞—á–∞, —è–∫—â–æ –¥–∏—Ç–∏–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞—î –∑ –ø–æ–∑–∏–≤–∞—á–µ–º)`);
            break;

        // –í–≤–æ–¥ —Å—É–º–º—ã –∞–ª–∏–º–µ–Ω—Ç–æ–≤
        case 'enter_amount':
            state.step = 'alimony_custom';
            await bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ —É –≥—Ä–∏–≤–Ω—è—Ö:');
            break;

        // –†—ñ—à–µ–Ω–Ω—è —Å—É–¥—É
        case 'prev_yes':
            state.data.previous_decision = true;
            state.step = 'enforcement_period';
            await bot.sendMessage(chatId, '7. –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Å—Ç—è–≥–Ω–µ–Ω–Ω—è –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –º–∏–Ω—É–ª–∏–π –ø–µ—Ä—ñ–æ–¥?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'enforcement_yes' }],
                        [{ text: '–ù—ñ', callback_data: 'enforcement_no' }]
                    ]
                }
            });
            break;
        case 'prev_no':
            state.data.previous_decision = false;
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        // –°—Ç—è–≥–Ω–µ–Ω–Ω—è –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤
        case 'enforcement_yes':
            state.step = 'enforcement_period';
            await bot.sendMessage(chatId, '–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1 —Ä—ñ–∫', callback_data: 'period_1' }],
                        [{ text: '2 —Ä–æ–∫–∏', callback_data: 'period_2' }],
                        [{ text: '3 —Ä–æ–∫–∏', callback_data: 'period_3' }]
                    ]
                }
            });
            break;
        case 'enforcement_no':
            state.data.enforcement_period = null;
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        // –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É —Å—Ç—è–≥–Ω–µ–Ω–Ω—è
        case 'period_1':
        case 'period_2':
        case 'period_3':
            state.data.enforcement_period = data.replace('period_', '') + ' —Ä–æ–∫–∏';
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        default:
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback - –∏–≥–Ω–æ—Ä
            break;
    }

    await bot.answerCallbackQuery(query.id);

};
