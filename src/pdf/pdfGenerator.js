import fontkit from '@pdf-lib/fontkit';
import fs from 'fs';
import fetch from 'node-fetch';
import path, { dirname } from 'path';
import pkg from 'pdf-lib';
import { fileURLToPath } from 'url';
import parseDate from './utils/parseDate.js';

const { PDFDocument, rgb } = pkg;

export async function createPdf(state, bot) {
    const pdfDoc = await PDFDocument.create();
    pdfDoc.registerFontkit(fontkit);

    const __filename = fileURLToPath(import.meta.url);
    const __dirname = dirname(__filename);
    
    const fontRegularBytes = fs.readFileSync(path.resolve(__dirname, '../assets/fonts/Merriweather_24pt_SemiCondensed-Light.ttf'));
    const fontSemiBoldBytes = fs.readFileSync(path.resolve(__dirname, '../assets/fonts/Merriweather_24pt_SemiCondensed-SemiBoldItalic.ttf'));
    const fontBoldBytes = fs.readFileSync(path.resolve(__dirname, '../assets/fonts/Merriweather_24pt_SemiCondensed-Bold.ttf'));

    const fontRegular = await pdfDoc.embedFont(fontRegularBytes);
    const fontSemiBold = await pdfDoc.embedFont(fontSemiBoldBytes);
    const fontBold = await pdfDoc.embedFont(fontBoldBytes);


    const dateObj = parseDate(state.data.claimant_years_old)

    function wrapText(text, maxWidth, font, fontSize) {
    const words = text.split(' ');
    const lines = [];
    let line = '';

    for (const word of words) {
        const testLine = line ? line + ' ' + word : word;
        const width = font.widthOfTextAtSize(testLine, fontSize);
        if (width > maxWidth && line) {
            lines.push(line);
            line = word;
        } else {
            line = testLine;
        }
    }
    if (line) lines.push(line);
    return lines;
}

    let page = pdfDoc.addPage([600, 800]);
    const { width, height } = page.getSize();
    const fontSize = 11;
    const lineHeight = 16;
    let y = height - 50;


    const drawText = (text, options = {}) => {
    const font = options.font || fontRegular;
    const size = options.size || fontSize;
    const color = options.color || rgb(0, 0, 0);
    const align = options.align;
    const x = options.x !== undefined ? options.x : 50;
    const maxWidth = options.maxWidth || (width - 100); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50px –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∫—Ä–∞—è
    const lineHeight = options.lineHeight || 16;
    const indent = options.indent || 20; // –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —à–∏—Ä–∏–Ω–µ maxWidth
    const lines = wrapText(text, maxWidth, font, size);

        for (let i = 0; i < lines.length; i++) {
        if (y < 60) {
            page = pdfDoc.addPage([600, 800]);
            y = height - 50;
        }

        const line = lines[i];

        let drawX = x;
        if (i === 0) {
            drawX += indent; // –û—Ç—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        }

        if (align === 'center') {
            const textWidth = font.widthOfTextAtSize(line, size);
            drawX = (width - textWidth) / 2;
        } else if (align === 'right') {
            const textWidth = font.widthOfTextAtSize(line, size);
            drawX = width - textWidth - 50;
        }

        page.drawText(line, {
            x: drawX,
            y,
            size,
            font,
            color,
        });
        y -= lineHeight;
    }
};
    const livesWithMap = {
        father: '–±–∞—Ç—å–∫–æ–º',
        mother: '–º–∞—Ç—ñ—Ä\'—é',
        other: '—ñ–Ω—à–∏–º'
    };

    // üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—É–¥–∞
    drawText('–î–æ –°–æ–±–æ—Ä–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥—É –º. –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞', { align: 'right', font: fontBold });
    drawText('–∞–¥—Ä–µ—Å–∞: 49005, –º. –î–Ω—ñ–ø—Ä–æ,', { align: 'right' });
    drawText('–≤—É–ª.–ì—É—Å–µ–Ω–∫–∞, 13', { align: 'right' });
    y -= 20;

    // üìç –ü–æ–∑–∏–≤–∞—á
    drawText(`–ü–æ–∑–∏–≤–∞—á: ${state.data.claimant_name || '-'}`, { align: 'right', font: fontBold });
    drawText(`${state.data.claimant_years_old || '-'} —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è`, { align: 'right' });
    drawText(`–ø–∞—Å–ø–æ—Ä—Ç ${state.data.claimant_passport || '-'}, –≤–∏–¥–∞–Ω–∏–π ${state.data.claimant_passport_issued || '-'}`, { align: 'right' });
    drawText(`–∞–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${state.data.claimant_address || '-'}`, { align: 'right' });
    drawText(`–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è : ${state.data.claimant_mailing || '-'}`, { align: 'right' });
    drawText(`—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±–ª—ñ–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø–ª–∞—Ç–Ω–∏–∫–∞ –ø–æ–¥–∞—Ç–∫—ñ–≤: ${state.data.claimant_ipn || '-'}`, { align: 'right' });
    drawText(`–∞–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: ${state.data.claimant_email || '-'}`, { align: 'right' });
    drawText(`–∑–∞—Å–æ–±–∏ –∑–≤‚Äô—è–∑–∫—É: —Ç–µ–ª.: ${state.data.claimant_phone || '-'}`, { align: 'right' });
    y -= 20;

    // üìç –í—ñ–¥–ø–æ–≤—ñ–¥–∞—á
    drawText(`–í—ñ–¥–ø–æ–≤—ñ–¥–∞—á: ${state.data.respondent_name || '-'}`, { align: 'right', font: fontBold });
    drawText(`${state.data.respondent_dob || '-'} —Ä–æ–∫—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è`, { align: 'right' });
    drawText(`–ø–∞—Å–ø–æ—Ä—Ç ${state.data.respondent_passport || '-'}, –≤–∏–¥–∞–Ω–∏–π ${state.data.respondent_passport_issued || '-'}`, { align: 'right' });
    drawText(`–∞–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${state.data.respondent_address || '-'}`, { align: 'right' });
    drawText(`—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±–ª—ñ–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø–ª–∞—Ç–Ω–∏–∫–∞ –ø–æ–¥–∞—Ç–∫—ñ–≤: ${state.data.respondent_ipn || '-'}`, { align: 'right' });
    drawText(`–∞–¥—Ä–µ—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏: ${state.data.respondent_email || '-'}`, { align: 'right' });
    drawText(`–∑–∞—Å–æ–±–∏ –∑–≤‚Äô—è–∑–∫—É: —Ç–µ–ª.: ${state.data.respondent_phone || '-'}`, { align: 'right' });
    y -= 20;

    // üëâ –ë–ª–æ–∫ —Å–ø—Ä–∞–≤–∞
    drawText('–ü–æ–∑–æ–≤ –Ω–µ–º–∞–π–Ω–æ–≤–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É', { align: 'right', font: fontBold });
    y -= 20;

    // üìç –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    drawText('–ü–æ–∑–æ–≤–Ω–∞ –∑–∞—è–≤–∞', { align: 'center', size: 13, font: fontBold });
    drawText('–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É', { align: 'center', size: 12 });
    y -= 20;

    drawText(`¬´${dateObj.day}¬ª ${dateObj.monthName} ${dateObj.year} —Ä–æ–∫—É –º—ñ–∂ –º–Ω–æ—é ${state.data.claimant_name || '-'} —Ç–∞ ${state.data.respondent_name || '-'}, –±—É–ª–æ —É–∫–ª–∞–¥–µ–Ω–æ —à–ª—é–±.`, {x: 70, maxWidth: width - 120, indent: 20});
    drawText(`–®–ª—é–± –±—É–ª–æ —Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É ${state.data.marriage_registry || '__________________'}, –∞–∫—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å ‚Ññ${state.data.marriage_record || '170'}.`, {x: 70, maxWidth: width - 120, indent: 20});
    drawText('–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—à–µ —Å—ñ–º–µ–π–Ω–µ –∂–∏—Ç—Ç—è —Å–∫–ª–∞–¥–∞–ª–æ—Å—å –¥–æ–±—Ä–µ, –ø—Ä–æ—Ç–µ –ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 2-—Ö —Ä–æ–∫—ñ–≤ —Å—ñ–º–µ–π–Ω—ñ —Å—Ç–æ—Å—É–Ω–∫–∏ –º—ñ–∂ –Ω–∞–º–∏ –ø–æ–≥—ñ—Ä—à–∏–ª–∏—Å—å, —â–æ –≤ –∫—ñ–Ω—Ü–µ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –ø—Ä–∏–∑–≤–µ–ª–æ –¥–æ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö —Å–≤–∞—Ä–æ–∫ —Ç–∞, —è–∫ –Ω–∞—Å–ª—ñ–¥–æ–∫, –¥–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –º—ñ–∂ –Ω–∞–º–∏ –±—É–¥—å-—è–∫–∏—Ö —à–ª—é–±–Ω–∏—Ö –≤—ñ–¥–Ω–æ—Å–∏–Ω.', {x: 70, maxWidth: width - 120, indent: 20});
    drawText(`–í—ñ–¥ —Ü—å–æ–≥–æ —à–ª—é–±—É ${state.children?.length > 0 ? '–º–∏ –º–∞—î–º–æ –¥—ñ—Ç–µ–π' : '–º–∏ –Ω–µ –º–∞—î–º–æ —Å–ø—ñ–ª—å–Ω–∏—Ö –¥—ñ—Ç–µ–π'}.`);
        state.children.forEach((child, index) => {
        drawText(`‚Ññ${index + 1}`);
        drawText(`‚Ä¢ –ü–Ü–ë: ${child.name || '-'}`);
        drawText(`‚Ä¢ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: ${child.dob || '-'}`);
        drawText(`‚Ä¢ –ü—Ä–æ–∂–∏–≤–∞—î –∑: ${livesWithMap[child.lives_with] || '-'}`);
        drawText('');
    });
    drawText('–ü—ñ–¥—Å—Ç–∞–≤–æ—é –¥–ª—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É —î —Ç—ñ –æ–±—Å—Ç–∞–≤–∏–Ω–∏, —â–æ —É –Ω–∞—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ —Å–ø—ñ–ª—å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ –∑ —á–æ–ª–æ–≤—ñ–∫–æ–º. –ù–∞—è–≤–Ω—ñ —Ä—ñ–∑–Ω—ñ –ø–æ–≥–ª—è–¥–∏ –Ω–∞ –∂–∏—Ç—Ç—è , –≤—ñ–¥—Å—É—Ç–Ω—î –≤–∑–∞—î–º–æ—Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ú–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –ø–æ—á—É—Ç—Ç—è –ª—é–±–æ–≤—ñ —Ç–∞ –ø–æ–≤–∞–≥–∏ –æ–¥–∏–Ω –¥–æ –æ–¥–Ω–æ–≥–æ. –ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–µ–º —Å–ø—ñ–ª—å–Ω–æ–≥–æ –≥–æ—Å–ø–æ–¥–∞—Ä—Å—Ç–≤–∞ –Ω–µ –≤–µ–¥–µ–º–æ, —Å—É–º—ñ—Å–Ω–æ –Ω–∞–∂–∏—Ç–µ —Å–ø—ñ—Ä–Ω–µ –º–∞–π–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—î.', {x: 70, maxWidth: width - 120});
    drawText('–í–≤–∞–∂–∞—é, —â–æ –Ω–∞—à –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–µ–º —à–ª—é–± —Ñ–∞–∫—Ç–∏—á–Ω–æ –ø—Ä–∏–ø–∏–Ω–∏–≤ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ä–æ–∫—ñ–≤, –ø–æ–¥–∞–ª—å—à–µ —Å–ø—ñ–ª—å–Ω–µ –∂–∏—Ç—Ç—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —à–ª—é–±—É —Å—É–ø–µ—Ä–µ—á–∏—Ç—å –º–æ—ó–º —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º, —É –∑–≤ º—è–∑–∫—É –∑ —á–∏–º –Ω–∞–ø–æ–ª—è–≥–∞—é –Ω–∞ –π–æ–≥–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—ñ. –ü–æ–¥–∞–ª—å—à–µ —Å—É–º—ñ—Å–Ω–µ –∂–∏—Ç—Ç—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—ñ–º º—ó –≤–≤–∞–∂–∞—é –Ω–µ–º–æ–∂–ª–∏–≤–∏–º.');
    drawText('–®–ª—é–± –º–∏ —Ä–æ–∑—Ä–∏–≤–∞—î–º–æ –≤–ø–µ—Ä—à–µ.');
    drawText('–ú–∞–π–Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—É –Ω–µ –º–∞—î–º–æ.');
    drawText('–ó–∞ –º–æ—ó–º –≥–ª–∏–±–æ–∫–∏–º –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è–º –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Å–µ–Ω—Å—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—ñ–º–µ–π–Ω—ñ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ –Ω–µ–º–∞—î, –í–≤–∞–∂–∞—é —â–æ –∑–∞ —Ç–∞–∫–∏—Ö —É–º–æ–≤ —à–ª—é–± –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑—ñ—Ä–≤–∞—Ç–∏ –±–µ–∑ –Ω–∞–¥–∞–Ω–Ω—è –±—É–¥—å —è–∫–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É –Ω–∞ –ø—Ä–∏–º–∏—Ä–µ–Ω–Ω—è.', {font: fontSemiBold,x: 70, maxWidth: width - 120});
    ////////
    drawText('–ó–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç.24 –°—ñ–º–µ–π–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ —à–ª—é–± –≥—Ä—É–Ω—Ç—É—î—Ç—å—Å—è –Ω–∞ –≤—ñ–ª—å–Ω—ñ–π –∑–≥–æ–¥—ñ –∂—ñ–Ω–∫–∏ —ñ —á–æ–ª–æ–≤—ñ–∫–∞. –ü—Ä–∏–º—É—à—É–≤–∞–Ω–Ω—è –∂—ñ–Ω–∫–∏ —Ç–∞ —á–æ–ª–æ–≤—ñ–∫–∞ –¥–æ —à–ª—é–±—É –Ω–µ –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è.', {x: 70, maxWidth: width - 120});
    drawText('–ú–∞–π–Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä—É –Ω–µ –º–∞—î–º–æ.');
    drawText('–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á.2 —Å—Ç.104 –°—ñ–º–µ–π–Ω–æ–≥–æ –ö–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ (–¥–∞–ª—ñ ‚Äì –°–ö –£–∫—Ä–∞—ó–Ω–∏), —à–ª—é–± –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –π–æ–≥–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è.');
    drawText('–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á.3 —Å—Ç.105 –°–ö –£–∫—Ä–∞—ó–Ω–∏, —à–ª—é–± –ø—Ä–∏–ø–∏–Ω—è—î—Ç—å—Å—è –≤–Ω–∞—Å–ª—ñ–¥–æ–∫ –π–æ–≥–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–∑–æ–≤–æ–º –æ–¥–Ω–æ–≥–æ –∑ –ø–æ–¥—Ä—É–∂–∂—è –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è —Å—É–¥—É, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞—Ç—Ç—ñ 110 —Ü—å–æ–≥–æ –ö–æ–¥–µ–∫—Å—É');
    drawText('–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á.1 —Å—Ç.110 –°–ö –£–∫—Ä–∞—ó–Ω–∏, –ø–æ–∑–æ–≤ –ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–µ–¥`—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–∏–º —ñ–∑ –ø–æ–¥—Ä—É–∂–∂—è.');
    drawText('–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —á.1 —Å—Ç.27 –¶–∏–≤—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏ (–¥–∞–ª—ñ ‚Äì –¶–ü–ö –£–∫—Ä–∞—ó–Ω–∏), –ø–æ–∑–æ–≤–∏ –¥–æ —Ñ—ñ–∑–∏—á–Ω–æ—ó –æ—Å–æ–±–∏ –ø—Ä–µ–¥‚Äô—è–≤–ª—è—é—Ç—å—Å—è –≤ —Å—É–¥ –∑–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–º—É –∑–∞–∫–æ–Ω–æ–º –ø–æ—Ä—è–¥–∫—É –º—ñ—Å—Ü–µ–º —ó—ó –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è, —è–∫—â–æ —ñ–Ω—à–µ –Ω–µ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–º.');
    drawText(`–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é, —â–æ –º–Ω–æ—é, ${state.data.claimant_name || '-'}, –Ω–µ –ø–æ–¥–∞–≤–∞–ª–æ—Å—å —ñ–Ω—à–æ–≥–æ –ø–æ–∑–æ–≤—É –¥–æ ${state.data.respondent_name || '-'} —á–∏ –¥–æ –±—É–¥—å —è–∫–æ—ó —ñ–Ω—à–æ—ó –æ—Å–æ–±–∏ –∑ —Ç–∏–º —Å–∞–º–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º —Ç–∞ –∑ —Ç–∏—Ö —Å–∞–º–∏—Ö –ø—ñ–¥—Å—Ç–∞–≤.`);
    drawText(`–ü–æ–≤—ñ–¥–æ–º–ª—è—é, —â–æ –ø–æ–∑–∏–≤–∞—á–∫–∞ –ø–æ–Ω–µ—Å–ª–∞ —Å—É–¥–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –≤ —Ä–æ–∑–º—ñ—Ä—ñ: ${state.data.fee || '1211,20'} –≥—Ä–Ω, —ñ–Ω—à–∏—Ö —Å—É–¥–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç –ø–æ–∑–∏–≤–∞—á–∫–∞ –Ω–µ –ø–æ–Ω–µ—Å–ª–∞ —Ç–∞ –Ω–µ –æ—á—ñ–∫—É—î –ø–æ–Ω–µ—Å—Ç–∏`);
    drawText('–©–æ–¥–æ –≤–∂–∏—Ç—Ç—è –∑–∞—Ö–æ–¥—ñ–≤ –¥–ª—è –¥–æ—Å—É–¥–æ–≤–æ–≥–æ –≤—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—É, –∑–∞–∑–Ω–∞—á–∞—é, —â–æ –∑–∞—Ö–æ–¥–∏ –¥–ª—è –¥–æ—Å—É–¥–æ–≤–æ–≥–æ –≤—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—É –Ω–µ –≤–∂–∏–≤–∞–ª–∏—Å—å.');
    drawText('–ó–∞—Ö–æ–¥–∏ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–æ–∫–∞–∑—ñ–≤ –∞–±–æ –ø–æ–∑–æ–≤—É –¥–æ –ø–æ–¥–∞–Ω–Ω—è –ø–æ–∑–æ–≤–Ω–æ—ó –∑–∞—è–≤–∏ –Ω–µ –≤–∂–∏–≤–∞–ª–∏—Å—å.');
    drawText(`–î–æ–¥–∞—Ç–∫–æ–≤–æ –∑–∞–∑–Ω–∞—á–∞—é, —â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª–∏ –ø–∏—Å—å–º–æ–≤–∏—Ö –¥–æ–∫–∞–∑—ñ–≤, –∞ —Å–∞–º–µ: —Å–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–± –Ü-–ö–ò ‚Ññ270417 –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É –ü–æ–∑–∏–≤–∞—á–∞; –ø–∞—Å–ø–æ—Ä—Ç: ${state.data.respondent_passport || ''} —Ç–∞ –Ü–ü–ù: ${state.data.respondent_ipn || ''} –ö—Ä—É–≥–ª–æ–≥–æ –ê–Ω–¥—Ä—ñ—è –í–∞—Å–∏–ª—å–æ–≤–∏—á–∞ —É –í—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞.`);
    drawText('–û—Ä–∏–≥—ñ–Ω–∞–ª –ø–∞—Å–ø–æ—Ä—Ç—É —Ç–∞ –Ü–ü–ù –ö—Ä—É–≥–ª–æ–π –ê–Ω–Ω–∏ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –ø–æ–∑–∏–≤–∞—á–∞.');
    y -= 20;
    drawText('–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏—â–µ–Ω–∞–≤–µ–¥–µ–Ω–æ–≥–æ —Ç–∞ –∫–µ—Ä—É—é—á–∏—Å—å —Å—Ç.—Å—Ç.104, 105, 110, 112 —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–æ—Ä–º –°—ñ–º–µ–π–Ω–æ–≥–æ –ö–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏, —Å—Ç.—Å—Ç.4, 19, 23, 27, 175, 177 —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–æ—Ä–º –¶–∏–≤—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ–∫—Å—É –£–∫—Ä–∞—ó–Ω–∏, —ñ–Ω—à–∏—Ö –Ω–æ—Ä–º –¥—ñ—é—á–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏.');
    y -= 20;
    drawText('–ü–†–û–®–£ –°–£–î:', { align: 'center', font: fontBold });
    y -= 20;
    drawText(`1. –†–æ–∑—ñ—Ä–≤–∞—Ç–∏ —à–ª—é–± –º—ñ–∂ –º–Ω–æ—é, ${state.data.claimant_name || '-'} —Ç–∞ ${state.data.respondent_name || '-'}`);
    drawText(`–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π ${dateObj.day} ${dateObj.monthName} ${dateObj.year} —Ä–æ–∫—É ${state.data.marriage_registry || '__________________'}, –∞–∫—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å ‚Ññ${state.data.marriage_record || '___'}.`);
    drawText('2. –°—É–¥–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ–∫–ª–∞—Å—Ç–∏ –Ω–∞ –ø–æ–∑–∏–≤–∞—á–∞.');
    y -= 20;
    drawText(`¬´${state.data.today_date || '___'}¬ª ${state.data.today_month || '___________'} ${state.data.today_year || '____'} —Ä–æ–∫—É`, { font: fontBold });
    y -= 30;
    drawText(`–ó –ø–æ–≤–∞–≥–æ—é`,{font: fontBold});
    drawText(`–ü–æ–∑–∏–≤–∞—á: _____________________ ${state.data.claimant_signature || '-'}  –ö—Ä—É–≥–ª–∞ –ê.–ú`,{align: 'center',font: fontBold});
    drawText('');
    drawText('–î–æ–¥–∞—Ç–∫–∏:',{font: fontBold});

    const photoTitles = [
        '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)',
        '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)',
        '–î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ —Å–∫–ª–∞–¥ —Å—ñ–º‚Äô—ó –∞–±–æ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏',
        '–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ —Å–ø–ª–∞—Ç—É —Å—É–¥–æ–≤–æ–≥–æ –∑–±–æ—Ä—É (—É –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –∞–ª—ñ–º–µ–Ω—Ç–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—ñ –≤—ñ–¥ —Å—É–¥–æ–≤–æ–≥–æ –∑–±–æ—Ä—É)'
    ];

    for (let i = 0; i < (state.attachments || []).length; i++) {
        const fileId = state.attachments[i];
        const title = photoTitles[i] || `–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ${i + 1}`;

        if (!fileId) continue;

        try {
            const url = await bot.getFileLink(fileId);
            const res = await fetch(url);
            const imgBytes = await res.arrayBuffer();

            let img;
            try {
                img = await pdfDoc.embedPng(imgBytes);
            } catch {
                img = await pdfDoc.embedJpg(imgBytes);
            }

            const newPage = pdfDoc.addPage([600, 800]);
            const { width, height } = newPage.getSize();
            let y = height - 50;

            newPage.drawText(`‚Ä¢ ${title}`, {
                x: 50,
                y,
                size: fontSize,
                font: fontRegular,
                color: rgb(0, 0, 0),
            });

            const scale = Math.min((width - 100) / img.width, (height - 150) / img.height, 0.7);
            const dims = img.scale(scale);

            newPage.drawImage(img, {
                x: 50,
                y: y - dims.height - 20,
                width: dims.width,
                height: dims.height,
            });
        } catch (e) {
            const errorPage = pdfDoc.addPage([600, 800]);
            errorPage.drawText(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${title}): ${e.message || e}`, {
                x: 50, y: 750, size: fontSize, font: fontRegular, color: rgb(1, 0, 0),
            });
        }
    }

    return await pdfDoc.save();
}
