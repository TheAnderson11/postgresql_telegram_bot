import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { userStates } from './state.js';

const TOKEN = '8050196668:AAEst8DfLTC72AYdaMuu9KzfxF23Ly9w3Us';
const bot = new TelegramBot(TOKEN, { polling: true });

// –í–∞–ª–∏–¥–∞—Ü–∏–∏
const validatePhone = (input) => /^\+380\d{9}$/.test(input);
const validateIPN = (input) => /^\d{10}$/.test(input);
const validateDOB = (input) => /^\d{2}\.\d{2}\.\d{4}$/.test(input);
const validateAmount = (input) => /^\d+(\.\d{1,2})?$/.test(input);

// –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
const skipButton = () => ({
    reply_markup: {
        inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip' }]]
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const restartFlow = (chatId) => {
    userStates[chatId] = {
        step: 'claimant_name',
        data: {},
        children: [],
        childIndex: 0,
        childrenTotal: 0,
        attachments: [],
        attachmentStep: 0,
        lastReminderSent: null,
        chatId
    };
    bot.sendMessage(chatId, '1. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–∑–∏–≤–∞—á–∞ (—Ç–æ–π, —Ö—Ç–æ –ø–æ–¥–∞—î –∑–∞—è–≤—É):\n–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë –ø–æ–∑–∏–≤–∞—á–∞:');
};

// –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/start/, (msg) => {
    restartFlow(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–∫–Ω–æ–ø–æ–∫)
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const state = userStates[chatId];
    if (!state) return restartFlow(chatId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    if (data === 'skip' && state.step === 'waiting_attachments') {
        const photoTitles = [
            '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)',
            '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)',
            '–î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ —Å–∫–ª–∞–¥ —Å—ñ–º‚Äô—ó –∞–±–æ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏',
            '–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ —Å–ø–ª–∞—Ç—É —Å—É–¥–æ–≤–æ–≥–æ –∑–±–æ—Ä—É'
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞ –≤ attachments –Ω–∞ —Ç–µ–∫—É—â–∏–π —à–∞–≥
        state.attachments[state.attachmentStep] = null;

        state.attachmentStep++;

        if (state.attachmentStep < photoTitles.length) {
            const nextDoc = photoTitles[state.attachmentStep];

            if (nextDoc === '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)') {
                await bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`, {
                    reply_markup: {
                        inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip' }]]
                    }
                });
            } else {
                await bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`);
            }
        } else {
            state.step = 'submit_ready';
            await bot.sendMessage(chatId, '‚úÖ –£—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É:', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üì® –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É', callback_data: 'submit_form' }]]
                }
            });
        }
        return bot.answerCallbackQuery(query.id);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (—Å–æ–∑–¥–∞–Ω–∏–µ PDF)
    if (data === 'submit_form') {
        const { createPdf } = await import('./pdfGenerator.js');
        try {
            const pdfBytes = await createPdf({
                data: state.data,
                children: state.children,
                attachments: state.attachments
            }, bot);

            const pdfBuffer = Buffer.from(pdfBytes);

            await bot.sendDocument(chatId, pdfBuffer, {
                filename: 'alimony_statement.pdf',
                contentType: 'application/pdf'
            });
            await bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏! –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç–∫—É: 1234 5678 9012 3456.');
            delete userStates[chatId];
        } catch (e) {
            console.error('‚ùå PDF Error:', e);
            await bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ PDF.');
        }
        return bot.answerCallbackQuery(query.id);
    }

    // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    switch (data) {
        // –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
        case 'lives_mother':
        case 'lives_father':
        case 'lives_other':
            state.children[state.childIndex].lives_with = data.replace('lives_', '');
            state.childIndex++;
            if (state.childIndex < state.childrenTotal) {
                state.step = 'child_name';
                await bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –¥–∏—Ç–∏–Ω–∏ ‚Ññ${state.childIndex + 1}:`);
            } else {
                state.step = 'marriage_check';
                await bot.sendMessage(chatId, '4. –ß–∏ –ø–µ—Ä–µ–±—É–≤–∞–ª–∏ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —à–ª—é–±—ñ?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–¢–∞–∫', callback_data: 'marriage_yes' }],
                            [{ text: '–ù—ñ', callback_data: 'marriage_no' }]
                        ]
                    }
                });
            }
            break;

        // –®–ª—é–±
        case 'marriage_yes':
            state.step = 'marriage_date';
            await bot.sendMessage(chatId, '–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —à–ª—é–±—É (–î–î.–ú–ú.–†–†–†–†):');
            break;
        case 'marriage_no':
            state.step = 'alimony_choice';
            await bot.sendMessage(chatId, '5. –°—É–º–∞ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∞–±–æ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1/4 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_4' }],
                        [{ text: '1/3 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_3' }],
                        [{ text: '1/2 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_2' }],
                        [{ text: '–í–≤–µ—Å—Ç–∏ —Å—É–º—É', callback_data: 'enter_amount' }]
                    ]
                }
            });
            break;

        // –†–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É
        case 'divorce_yes':
            state.step = 'marriage_divorce_date';
            await bot.sendMessage(chatId, '–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (–î–î.–ú–ú.–†–†–†–†):');
            break;
        case 'divorce_no':
            state.step = 'alimony_choice';
            await bot.sendMessage(chatId, '5. –°—É–º–∞ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∞–±–æ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1/4 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_4' }],
                        [{ text: '1/3 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_3' }],
                        [{ text: '1/2 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_2' }],
                        [{ text: '–í–≤–µ—Å—Ç–∏ —Å—É–º—É', callback_data: 'enter_amount' }]
                    ]
                }
            });
            break;

        // –í—ã–±–æ—Ä –∞–ª–∏–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        case 'percent_1_4':
        case 'percent_1_3':
        case 'percent_1_2':
            state.data.alimony = data.replace('percent_', '').replace(/_/g, '/');
            state.step = 'court_name';
            await bot.sendMessage(chatId,
                `6. –°—É–¥–æ–≤–∞ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è:\n\n` +
                `‚Ä¢ –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ —Å—É–¥—É, –¥–æ —è–∫–æ–≥–æ –ø–æ–¥–∞—î—Ç—å—Å—è –∑–∞—è–≤–∞ (–∑–∞–∑–≤–∏—á–∞–π ‚Äì –∑–∞ –º—ñ—Å—Ü–µ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞ –∞–±–æ –ø–æ–∑–∏–≤–∞—á–∞, —è–∫—â–æ –¥–∏—Ç–∏–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞—î –∑ –ø–æ–∑–∏–≤–∞—á–µ–º)`);
            break;

        // –í–≤–æ–¥ —Å—É–º–º—ã –∞–ª–∏–º–µ–Ω—Ç–æ–≤
        case 'enter_amount':
            state.step = 'alimony_custom';
            await bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ —É –≥—Ä–∏–≤–Ω—è—Ö:');
            break;

        // –†—ñ—à–µ–Ω–Ω—è —Å—É–¥—É
        case 'prev_yes':
            state.data.previous_decision = true;
            state.step = 'enforcement_period';
            await bot.sendMessage(chatId, '7. –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Å—Ç—è–≥–Ω–µ–Ω–Ω—è –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∑–∞ –º–∏–Ω—É–ª–∏–π –ø–µ—Ä—ñ–æ–¥?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'enforcement_yes' }],
                        [{ text: '–ù—ñ', callback_data: 'enforcement_no' }]
                    ]
                }
            });
            break;
        case 'prev_no':
            state.data.previous_decision = false;
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        // –°—Ç—è–≥–Ω–µ–Ω–Ω—è –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤
        case 'enforcement_yes':
            state.step = 'enforcement_period';
            await bot.sendMessage(chatId, '–ó–∞ —è–∫–∏–π –ø–µ—Ä—ñ–æ–¥?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1 —Ä—ñ–∫', callback_data: 'period_1' }],
                        [{ text: '2 —Ä–æ–∫–∏', callback_data: 'period_2' }],
                        [{ text: '3 —Ä–æ–∫–∏', callback_data: 'period_3' }]
                    ]
                }
            });
            break;
        case 'enforcement_no':
            state.data.enforcement_period = null;
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        // –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É —Å—Ç—è–≥–Ω–µ–Ω–Ω—è
        case 'period_1':
        case 'period_2':
        case 'period_3':
            state.data.enforcement_period = data.replace('period_', '') + ' —Ä–æ–∫–∏';
            state.step = 'waiting_attachments';
            state.attachmentStep = 0;
            state.attachments = [];
            await bot.sendMessage(chatId, '–î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏:');
            await bot.sendMessage(chatId, '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)');
            break;

        default:
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback - –∏–≥–Ω–æ—Ä
            break;
    }

    await bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —à–∞–≥–∞–º
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();
    const state = userStates[chatId];
    if (!state || text?.startsWith('/')) return;

    const store = (key, value) => { state.data[key] = value; };

    switch (state.step) {
        case 'claimant_name':
            store('claimant_name', text);
            state.step = 'claimant_address';
            return bot.sendMessage(chatId, '–ê–¥—Ä–µ—Å–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–æ–∑–∏–≤–∞—á–∞:');

        case 'claimant_address':
            store('claimant_address', text);
            state.step = 'claimant_phone';
            return bot.sendMessage(chatId, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–∑–∏–≤–∞—á–∞:', skipButton());

        case 'claimant_phone':
            if (!validatePhone(text)) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380123456789');
            store('claimant_phone', text);
            state.step = 'claimant_ipn';
            return bot.sendMessage(chatId, '–Ü–ü–ù –ø–æ–∑–∏–≤–∞—á–∞:', skipButton());

        case 'claimant_ipn':
            if (!validateIPN(text)) return bot.sendMessage(chatId, '–Ü–ü–ù –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 10 —Ü–∏—Ñ—Ä.');
            store('claimant_ipn', text);
            state.step = 'respondent_name';
            return bot.sendMessage(chatId, '2. –ü–Ü–ë –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:');

        case 'respondent_name':
            store('respondent_name', text);
            state.step = 'respondent_address';
            return bot.sendMessage(chatId, '–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());

        case 'respondent_address':
            store('respondent_address', text);
            state.step = 'respondent_phone';
            return bot.sendMessage(chatId, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());

        case 'respondent_phone':
            if (!validatePhone(text)) return bot.sendMessage(chatId, '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: +380123456789');
            store('respondent_phone', text);
            state.step = 'respondent_work';
            return bot.sendMessage(chatId, '–ú—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());

        case 'respondent_work':
            store('respondent_work', text);
            state.step = 'respondent_ipn';
            return bot.sendMessage(chatId, '–Ü–ü–ù –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞:', skipButton());

        case 'respondent_ipn':
            if (!validateIPN(text)) return bot.sendMessage(chatId, '–Ü–ü–ù –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 10 —Ü–∏—Ñ—Ä.');
            store('respondent_ipn', text);
            state.step = 'children_count';
            return bot.sendMessage(chatId, '3. –°–∫—ñ–ª—å–∫–∏ —É –≤–∞—Å –¥—ñ—Ç–µ–π?');

        case 'children_count': {
            const count = parseInt(text);
            if (isNaN(count) || count <= 0) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ –Ω—É–ª—è.');
            state.childrenTotal = count;
            state.childIndex = 0;
            state.children = [];
            state.step = 'child_name';
            return bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –¥–∏—Ç–∏–Ω–∏ ‚Ññ1:`);
        }

        case 'child_name':
            state.children.push({ name: text });
            state.step = 'child_dob';
            return bot.sendMessage(chatId, '–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12.05.1999):');

        case 'child_dob':
            if (!validateDOB(text)) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†');
            state.children[state.childIndex].dob = text;
            state.step = 'child_lives_with';
            return bot.sendMessage(chatId, '–ó –∫–∏–º –ø—Ä–æ–∂–∏–≤–∞—î –¥–∏—Ç–∏–Ω–∞?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ú–∞—Ç–∏', callback_data: 'lives_mother' }],
                        [{ text: '–ë–∞—Ç—å–∫–æ', callback_data: 'lives_father' }],
                        [{ text: '–Ü–Ω—à–µ', callback_data: 'lives_other' }]
                    ]
                }
            });

        case 'alimony_custom':
            if (!validateAmount(text)) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 5000):');
            store('alimony', text);
            state.step = 'court_name';
            return bot.sendMessage(chatId,
                `6. –°—É–¥–æ–≤–∞ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è:\n\n` +
                `‚Ä¢ –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ —Å—É–¥—É, –¥–æ —è–∫–æ–≥–æ –ø–æ–¥–∞—î—Ç—å—Å—è –∑–∞—è–≤–∞ (–∑–∞–∑–≤–∏—á–∞–π ‚Äì –∑–∞ –º—ñ—Å—Ü–µ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á–∞ –∞–±–æ –ø–æ–∑–∏–≤–∞—á–∞, —è–∫—â–æ –¥–∏—Ç–∏–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞—î –∑ –ø–æ–∑–∏–≤–∞—á–µ–º)`);

        case 'marriage_date':
            if (!validateDOB(text)) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†');
            store('marriage_date', text);
            state.step = 'marriage_divorced';
            return bot.sendMessage(chatId, '–ß–∏ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ —à–ª—é–±?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'divorce_yes' }],
                        [{ text: '–ù—ñ', callback_data: 'divorce_no' }]
                    ]
                }
            });

        case 'marriage_divorce_date':
            if (!validateDOB(text)) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†');
            store('divorce_date', text);
            state.step = 'alimony_choice';
            return bot.sendMessage(chatId, '5. –°—É–º–∞ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∞–±–æ —Å–ø–æ—Å—ñ–± –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1/4 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_4' }],
                        [{ text: '1/3 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_3' }],
                        [{ text: '1/2 –≤—ñ–¥ –¥–æ—Ö–æ–¥—É', callback_data: 'percent_1_2' }],
                        [{ text: '–í–≤–µ—Å—Ç–∏ —Å—É–º—É', callback_data: 'enter_amount' }]
                    ]
                }
            });

        case 'court_name':
            store('court_name', text);
            state.step = 'previous_decision';
            return bot.sendMessage(chatId, '7. –ß–∏ –±—É–ª–∏ –≤–∂–µ —Ä—ñ—à–µ–Ω–Ω—è —Å—É–¥—É —â–æ–¥–æ –∞–ª—ñ–º–µ–Ω—Ç—ñ–≤?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'prev_yes' }],
                        [{ text: '–ù—ñ', callback_data: 'prev_no' }]
                    ]
                }
            });

        case 'waiting_attachments': {
            const photoTitles = [
                '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏ (–∫–æ–ø—ñ—è)',
                '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)',
                '–î–æ–≤—ñ–¥–∫–∞ –ø—Ä–æ —Å–∫–ª–∞–¥ —Å—ñ–º‚Äô—ó –∞–±–æ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è –¥–∏—Ç–∏–Ω–∏',
                '–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ —Å–ø–ª–∞—Ç—É —Å—É–¥–æ–≤–æ–≥–æ –∑–±–æ—Ä—É'
            ];

            if (msg.photo) {
                if (msg.media_group_id) {
                    return bot.sendMessage(chatId, '‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É, –∞ –Ω–µ –∞–ª—å–±–æ–º–æ–º.');
                }

                const largest = msg.photo[msg.photo.length - 1];
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É
                state.attachments[state.attachmentStep] = largest.file_id;
                state.attachmentStep++;

                if (state.attachmentStep < photoTitles.length) {
                    const nextDoc = photoTitles[state.attachmentStep];

                    if (nextDoc === '–°–≤—ñ–¥–æ—Ü—Ç–≤–æ –ø—Ä–æ —à–ª—é–±/–ø—Ä–æ —Ä–æ–∑—ñ—Ä–≤–∞–Ω–Ω—è —à–ª—é–±—É (—è–∫—â–æ —î)') {
                        return bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`, {
                            reply_markup: {
                                inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip' }]]
                            }
                        });
                    } else {
                        return bot.sendMessage(chatId, `–î–æ–¥–∞–π—Ç–µ: ${nextDoc}`);
                    }
                } else {
                    state.step = 'submit_ready';
                    return bot.sendMessage(chatId, '‚úÖ –£—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É:', {
                        reply_markup: {
                            inline_keyboard: [[{ text: 'üì® –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤—É', callback_data: 'submit_form' }]]
                        }
                    });
                }
            } else {
                return bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.');
            }
        }

        default:
            return bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫. –í–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.');
    }
});

// –ó–∞–ø—É—Å–∫ express (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
const app = express();
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
